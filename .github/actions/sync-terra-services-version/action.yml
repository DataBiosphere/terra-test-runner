# This action can be used by another repo to sync Terra services version on demand by including
# the following 'uses' property in GitHub Action step.
# The calling repo must pass the ${{ secrets.BROADBOT_TOKEN }} as input token to this action.
# - uses: DataBiosphere/terra-test-runner/.github/actions/sync-terra-services-version

name: 'sync-terra-services-version'
description: 'Calculate versions of Terra services'
author: ''
inputs:
  env_type:
    description: 'Environment type: live | personal'
    required: true
    default: ''
  environment:
    description: 'Environment: live (dev | perf | alpha | staging | prod); personal (wsmtest). See terra-helmfile/enviroments/live; tterra-helmfile/environments/personal, respectively.'
    required: true
    default: ''
  token:
    description: 'Token used to run authenticated git commands'
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    # Check out terra-helmfile repo
    - uses: actions/checkout@v2
      with:
        repository: broadinstitute/terra-helmfile
        ref: master
        token: ${{ inputs.token }}
        path: terra-helmfile

    - name: Calculate versions of Terra services
      run: |
        set -e

        if ${{ ! (contains(fromJson('["dev", "perf", "alpha", "staging", "prod"]'), inputs.environment) || contains(fromJson('["live", "personal"]'), inputs.env_type)) }}; then
          echo "Warning: Invalid inputs. Plese use a valid input: environment = dev | perf | alpha | staging | prod, env_type = live | personal."
          exit 0
        fi

        which yq
        which brew

        # Calculates the Terra versions
        # Positional arguments:
        #   Version file path $1: required
        #   Force enable flag $2: optional
        # Output Terra versions to $GITHUB_ENV with env names in the following format:
        #   <appName>_appVersion, <appName>_chartVersion
        # e.g. workspacemanager_appVersion, workspacemanager_chartVersion
        calculate_terra_versions () {
          VER_FILE_PATH=$1
          FORCE_ENABLE_FLAG=${2:-}

          echo "Using $VER_FILE_PATH version file"
          while read TERRA_COMPONENT
          do
            if [ -z $FORCE_ENABLE_FLAG ]; then
              ENABLE_FLAG=$(yq e ".releases.${TERRA_COMPONENT}.enabled" terra-helmfile/$VER_FILE_PATH)
            else
              ENABLE_FLAG=$FORCE_ENABLE_FLAG
            fi

            if $ENABLE_FLAG; then
              # Check if appVersion exist
              if $(yq e ".releases.${TERRA_COMPONENT} | has(\"appVersion\")" terra-helmfile/$VER_FILE_PATH) ; then
                VERSION=$(yq e ".releases.${TERRA_COMPONENT}.appVersion" terra-helmfile/$VER_FILE_PATH)
                echo "${TERRA_COMPONENT}_appVersion=${VERSION}" >> $GITHUB_ENV
              else
                echo "${TERRA_COMPONENT}.appVersion has not been set in $VER_FILE_PATH"
              fi

              # Check if chartVersion exist
              if $(yq e ".releases.${TERRA_COMPONENT} | has(\"chartVersion\")" terra-helmfile/$VER_FILE_PATH) ; then
                CHART_VERSION=$(yq e ".releases.${TERRA_COMPONENT}.appVersion" terra-helmfile/$VER_FILE_PATH)
                echo "${TERRA_COMPONENT}_chartVersion=${CHART_VERSION}" >> $GITHUB_ENV
              else
                echo "${TERRA_COMPONENT}.chartVersion has not been set in $VER_FILE_PATH"
              fi
            fi
          done < <(yq e '.releases | keys' terra-helmfile/$VER_FILE_PATH -o=j | jq -r -c '.[]')
        }

        # Determine the base version file to use and load versions into envars.
        if ${{ contains(fromJson('["alpha", "staging", "prod"]'), inputs.environment) }}; then
          BASE_VER_FILE_PATH=versions/app/${{ inputs.environment }}.yaml
        else
          # personal, dev, perf
          BASE_VER_FILE_PATH=versions/app/dev.yaml
        fi
        calculate_terra_versions $BASE_VER_FILE_PATH true

        # Determine which override version file to use and update the base versions.
        OVERIDE_VER_FILE_PATH=environments/${{ inputs.env_type }}/${{ inputs.environment }}.yaml
        calculate_terra_versions $OVERIDE_VER_FILE_PATH

      shell: bash

    - name: Echo MC Terra Module versions
      id: echo-terra-versions
      run: |
        echo "This is $agora_appVersion"
      shell: bash
