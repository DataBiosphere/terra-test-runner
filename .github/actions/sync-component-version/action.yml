name: 'sync-terra-services-version'
description: 'Calculate latest versions of Terra services'
author: ''
inputs:
  env_type:
    description: 'Environment type: live | personal'
    required: true
    default: ''
  environment:
    description: 'Environment: live (dev | perf | alpha | staging | prod); personal (wsmtest). See terra-helmfile/enviroments/live; tterra-helmfile/environments/personal, respectively.'
    required: true
    default: ''
  token:
    description: 'Token used to run authenticated git commands'
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    # Check out terra-helm repo
    - uses: actions/checkout@v2
      with:
        repository: broadinstitute/terra-helm
        ref: master
        path: terra-helm

    # Check out terra-helmfile repo
    - uses: actions/checkout@v2
      with:
        repository: broadinstitute/terra-helmfile
        ref: master
        token: ${{ inputs.token }}
        path: terra-helmfile

    - name: Calculate latest versions of Terra services
      run: |
        set -e

        if ${{ contains(fromJson('["alpha", "staging", "prod"]'), inputs.environment) }}; then
          BASE_ENV=${{ inputs.environment }}
        else
          # personal, dev, perf
          BASE_ENV=dev
        fi

        # Load default versions from terra-helmfile/versions/app/*.yaml
        while read TERRA_COMPONENT
        do
          VERSION=$(yq e ".releases.${TERRA_COMPONENT}.appVersion" terra-helmfile/versions/app/${BASE_ENV}.yaml)
          CHART_VERSION=$(yq e ".releases.${TERRA_COMPONENT}.chartVersion" terra-helmfile/versions/app/${BASE_ENV}.yaml)
          echo "${TERRA_COMPONENT}_appVersion=${VERSION}" >> $GITHUB_ENV
          echo "${TERRA_COMPONENT}_chartVersion=${CHART_VERSION}" >> $GITHUB_ENV
        done < <(yq e '.releases | keys' terra-helmfile/versions/app/${BASE_ENV}.yaml -j | jq -r -c '.[]')

        OVERIDE_ENV=${{ inputs.env_type }}/${{ inputs.environment }}
        # Load versions from terra-helmfile/environments/${OVERIDE_ENV}.yaml
        while read TERRA_COMPONENT
        do
          ENABLED=$(yq e ".releases.${TERRA_COMPONENT}.enabled" terra-helmfile/environments/${OVERIDE_ENV}.yaml)
          VERSION=$(yq e ".releases.${TERRA_COMPONENT}.appVersion" terra-helmfile/environments/${OVERIDE_ENV}.yaml)
          CHART_VERSION=$(yq e ".releases.${TERRA_COMPONENT}.chartVersion" terra-helmfile/environments/${OVERIDE_ENV}.yaml)
          echo $TERRA_COMPONENT
          if $ENABLED; then
            if "$VERSION" ; then
              echo $VERSION
            fi
            if "$CHART_VERSION" ; then
              echo $CHART_VERSION
            fi
          else
            echo "~~~~~!"
          fi
        done < <(yq e '.releases | keys' terra-helmfile/environments/${OVERIDE_ENV}.yaml -j | jq -r -c '.[]')

      shell: bash

    - name: Echo MC Terra Module versions
      id: echo-terra-versions
      run: |
        echo "This is $agora_appVersion"
      shell: bash
